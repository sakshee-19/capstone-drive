service:
  name: image-drive
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'} # either provided by user or default dev
  region: ${opt:region, 'ap-south-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    USERS: Users-${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  createUser:
    handler: src/lambda/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}

  getUser:
    handler: src/lambda/getUser.handler
    events:
      - http:
          method: get
          path: users/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
  
  updateUser:
    handler: src/lambda/updateUser.handler
    events:
      - http:
          method: patch
          path: users/{userId}
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}

#  resourcess
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS}