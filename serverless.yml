service:
  name: image-drive
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'} # either provided by user or default dev
  region: ${opt:region, 'ap-south-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    USERS: Users-${self:provider.stage}
    FILES_INFO: Files-info-${self:provider.stage}
    FILE_INDEX: FilesIdIndex
    S3_BUCKET: files-upload-sak-${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  createUser:
    handler: src/lambda/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}

  getUser:
    handler: src/lambda/getUser.handler
    events:
      - http:
          method: get
          path: users/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
  
  updateUser:
    handler: src/lambda/updateUser.handler
    events:
      - http:
          method: patch
          path: users/{userId}
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}

  shareFile:
    handler: src/lambda/shareFile.handler
    events:
      - http:
          method: patch
          path: share/user/{userId}/file/{fileId}
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
  
  accessFile:
    handler: src/lambda/files/getAccessFiles.handler
    events:
      - http:
          method: patch
          path: share/user/{userId}/file
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:QueryItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}

  createFilesInfo:
    handler: src/lambda/files/createFilesInfo.handler
    events:
      - http:
          method: post
          path: users/{userId}/files
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}

  getFileInfo:
    handler: src/lambda/files/getFileInfo.handler
    events:
      - http:
          method: get
          path: files/{fileId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
  
  getFilesInfo:
    handler: src/lambda/files/getAllFilesInfo.handler
    events:
      - http:
          method: get
          path: users/{userId}/files
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
  
  updateFileInfo:
    handler: src/lambda/files/updateFileInfo.handler
    events:
      - http:
          method: patch
          path: users/{userId}/files/{fileId}
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
  
  deleteFileInfo:
    handler: src/lambda/files/deleteFileInfo.handler
    events:
      - http:
          method: delete
          path: users/{userId}/files/{fileId}
          cors: true
          credentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
     

#  resourcess
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS}
  
  
    FilesInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FILE_INDEX}
            KeySchema:
            - AttributeName: fileId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.FILES_INFO}
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - 'GET'
                - 'POST'
                - 'DELETE'
                - 'PUT'
                - 'HEAD'
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 
    