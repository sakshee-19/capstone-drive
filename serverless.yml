service:
  name: image-drive
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev
  documentation:
    api:
      info:
        version: v1.0.0
        title: Drive API
        description: Drive
    models:
      - name: createUserReq
        contentType: application/json
        schema: ${file(src/json/user/create.json)}
      - name: updateUserReq
        contentType: application/json
        schema: ${file(src/json/user/update.json)}
      - name: createFileReq
        contentType: application/json
        schema: ${file(src/json/file/create.json)}
      - name: updateFileReq
        contentType: application/json
        schema: ${file(src/json/file/update.json)}
      - name: shareFileReq
        contentType: application/json
        schema: ${file(src/json/user/share.json)}
      - name: unshareFileReq
        contentType: application/json
        schema: ${file(src/json/user/unshare.json)}


provider:
  tracing:
    lambda: true
    apiGateway: true
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'} # either provided by user or default dev
  region: ${opt:region, 'ap-south-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    USERS: Users-${self:provider.stage}
    FILES_INFO: Files-info-${self:provider.stage}
    FILE_INDEX: FilesIdIndex
    S3_BUCKET: files-upload-sak-${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

functions:
  RS256Auth:
    handler: src/lambda/auth/authrs256.handler
  
  createUser:
    handler: src/lambda/createUser.handler
    events:
      - http:
          method: post
          path: users
          authorizer: RS256Auth
          cors: true
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create a new user 
            description: create a new user
            requestModels:
              'application/json': createUserReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  getUser:
    handler: src/lambda/getUser.handler
    events:
      - http:
          method: get
          path: users/{userId}
          authorizer: RS256Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  
  updateUser:
    handler: src/lambda/updateUser.handler
    events:
      - http:
          method: patch
          path: users/{userId}
          authorizer: RS256Auth
          cors: true
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a user 
            description: update a user
            requestModels:
              'application/json': updateUserReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  shareFile:
    handler: src/lambda/shareFile.handler
    events:
      - http:
          method: patch
          path: share/users/{userId}/files/{fileId}
          authorizer: RS256Auth
          cors: true
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: share file
            description: share file
            requestModels:
              'application/json': shareFileReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      

  unshareFile:
    handler: src/lambda/unshareFile.handler
    events:
      - http:
          method: patch
          path: unshare/users/{userId}/files/{fileId}
          authorizer: RS256Auth
          cors: true
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: unshare file 
            description: unshare file
            requestModels:
              'application/json': unshareFileReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  accessFile:
    handler: src/lambda/files/getAccessFiles.handler
    events:
      - http:
          method: get
          path: share/users/{userId}/files
          cors: true
          credentials: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  createFilesInfo:
    handler: src/lambda/files/createFilesInfo.handler
    events:
      - http:
          method: post
          path: users/{userId}/files
          authorizer: RS256Auth
          cors: true
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create a new file 
            description: create a new file
            requestModels:
              'application/json': createFileReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  getFileInfo:
    handler: src/lambda/files/getFileInfo.handler
    events:
      - http:
          method: get
          path: files/{fileId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}/*
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  getFilesInfo:
    handler: src/lambda/files/getAllFilesInfo.handler
    events:
      - http:
          method: get
          path: users/{userId}/files
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  
  updateFileInfo:
    handler: src/lambda/files/updateFileInfo.handler
    events:
      - http:
          method: patch
          path: users/{userId}/files/{fileId}
          cors: true
          authorizer: RS256Auth
          credentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a  file 
            description: create a file
            requestModels:
              'application/json': updateFileReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  
  deleteFileInfo:
    handler: src/lambda/files/deleteFileInfo.handler
    events:
      - http:
          method: delete
          path: users/{userId}/files/{fileId}
          cors: true
          credentials: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_INFO}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
     

#  resourcess
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS}
  
  
    FilesInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FILE_INDEX}
            KeySchema:
            - AttributeName: fileId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.FILES_INFO}
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - 'GET'
                - 'POST'
                - 'DELETE'
                - 'PUT'
                - 'HEAD'
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 
    